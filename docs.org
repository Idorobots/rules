# ###############################################################################
#+TITLE: *Wykorzystanie systemów regułowych do implementacji mechanizmu obsługi zdarzeń.*
#+AUTHOR: Kajetan Rzepecki
#+DATE: \small{EIS 2014} \\* \\* \today
#
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [12pt, a4paper]
#+LaTeX_HEADER: \usepackage[margin=2cm]{geometry}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \usepackage [polish]{babel}
#+OPTIONS: tags:nil toc:nil
# ###################

#+latex: \thispagestyle{empty}
#+latex: \vfill \vfill \vfill
#+latex: \pagebreak

* Opis
Celem projektu jest zbadanie możliwości oraz opłacalności implementacji mechanizmu obsługi zdarzeń w systemie programistycznym z wykorzystaniem systemów regułowych z *wnioskowaniem w przód*.

Mechanizm ów ma za zadanie ułatwić obsługę zdarzeń zachodzących w systemie poprzez umożliwienie definiowania reguł i faktów w sposób deklaratywny i zintegrowany ze składnią i semantyką języka programowania, w którym jest wykorzystywany:

#+BEGIN_SRC scheme
(assert!
  (predicate subject object) ;; Dodanie faktu do bazy faktów.
  ...)

(whenever rule               ;; Dodanie reguły reprezentującej zdarzenie
  action                     ;; oraz instrukcji je obsługujących do
  ...)                       ;; bazy faktów.

(declare (foo x y)           ;; Deklaracja funkcji, zawierająca
  (_@ a function)            ;; automatycznie inferowane fakty
  (_@ arity 2)               ;; dotyczące funkcji,
  (@ big-oh 1)               ;; dodatkowe fakty dostarczone przez autora oraz
  (@ equal (foo 2 21) 23))   ;; informacje o kontraktach funkcji.

(define (foo x y)
  (+ x y))
#+END_SRC

** Zastosowanie proponowanego mechanizmu
Mechanizm obsługi zdarzeń będzie docelowo wykorzystywany w zastosowaniach Internet of Things - środowisku rozproszonym z wysoką redundancją, gdzie wiele węzłów tworzących klaster udostępnia zbliżone funkcjonalności o nieco różnych charakterystykach.

Na potrzeby projektu, węzłem określana będzie instancja maszyny wirtualnej języka programowania, na której dostępne są *moduły* - zbiory funkcji realizujących jakąś funkcjonalność. Dynamicznie łączące i rozłączające się węzły będą generowały zdarzenia (indukowane przez i składające się z elementarnych operacji modyfikacji bazy faktów) takie jak: połączenie nowego węzła, pojawienie się nowego modułu, czy dowolne zmiany zawarte w kodzie przez porgramistę. Zdarzenia te będą przesyłane do pozostałych połączonych węzłów.

Dzięki zastosowaniu systemu regułowego, moduły wchodzące w skład danego węzła będą mogły reagować na napływające zdarzenia odpowiednio modyfikując swoje zachowanie. W celu obsługi danego zdarzenia definiowana będzie reguła (o dowolnej złożoności), która w momencie spełnienia uruchamiała będzie szereg instrukcji obsługujących zdarzenie.

Wykorzystanie wnioskowania w przód umożliwi definiowanie reguł z wyprzedzeniem - powiązane z nimi instrukcje obsługujące zdarzenie zostaną wykonane dopiero w momencie spełnienia reguły, po dostatecznej modyfikacji bazy faktów.

#+LaTeX: \pagebreak
** Przykład zastosowania proponowanego mechanizmu

#+LaTeX: \noindent
Posiadając następujący moduł pobierający dane GPS z czujnika:

#+BEGIN_SRC scheme
  (define-module gps-default
    (provide gps)

    (declare (get-location)
      (@ tolerance 0.01))

    (define (get-location)
      ;; Code that gets current location.
      ))
#+END_SRC

#+LaTeX: \noindent
...oraz następującą applikację z niego korzystającą:

#+BEGIN_SRC scheme
  (define-module gps-app
    (import 'gps-default)

    (define (use-gps-data)
      (let ((curr-location (gps-default:get-location)))
        ;; Use gps function to do something.
        ))

    (define (update-state)
      ;; Update apps state using latest gps data.
      ))
#+END_SRC

#+LaTeX: \noindent
...programista jest w stanie zadeklarować obsługę pojawienia się modułu pobierającego dane GPS z większą dokładnością:

#+BEGIN_SRC scheme
  (define-module gps-app
    (import 'gps-default)

    (define gps-location-function gps-default:get-location)

    (whenever (and (module-loaded ?node ?module)
                               (declares ?module ?function)
                               (name ?function 'get-location)
                               (tolerance ?function ?tol)
                               (< ?tol 0.01))
      (set! gps-location-function ?node:?module:?function)
      (update-state))

    (define (use-gps-data)
      (let ((curr-location (get-location-function)))
        ;; Use gps function to do something.
        ))

    (define (update-state)
      ;; Update apps state using latest gps data.
      ))
#+END_SRC

#+LaTeX: \noindent
...dzięki czemu, po podłączeniu węzła udostępniającego następujący moduł:

#+BEGIN_SRC scheme
  (define-module gps-vendor
    (provide gps)

    (declare (get-location)
      (@ tolerance 0.0001))

    (define (get-location)
      ;; Code that gets current location.
      ))
#+END_SRC

#+LaTeX: \noindent
...system działający na dotychczasowym węźle automatycznie będzie wyświetlał dane z większą dokładnością.

* Zespół
[[mailto:kajtek@idorobots.org][Kajetan Rzepecki]]

* Wymagania
** Milestone 1 - Analiza problemu
- Opis zastosowania systemów regułowych w domenie problemu
- Analiza możliwości i przydatności jego zastosowania
- Analiza podobnych rozwiązań

** Milestone 2 - Szkic rozwiązania
- Wybór algorytmów potrzebnych do implementacji
- Porównanie różnych podejść

** Milestone 3 - Prototyp rozwiązania
- Implementacja wybranych algorytmów
- Przykłady zastosowania systemu regułowego

** Milestone 4 - Analiza proponowanego rozwiązania
- Analiza wydajności i opłacalności proponowanego rozwiązania
- Wnioski i raport końcowy

* Spotkania
* Projekt
https://github.com/Idorobots/rules/

* Sprawozdanie
* Materiały
- /lista wykorzystanych materiałów/

